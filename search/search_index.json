{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CRandom","text":"<p>A random number generation implementation in C similar to the one found in standard C++</p> Distribution functions Distribution functions Xoshiro256** Xoshiro256** random number generator"},{"location":"#types","title":"Types","text":"Name Description random_device_t Random Device type. random_engine_t Random engine type. RandomEngineSpec Random engine specification structure. Xoshiro256ssSpec Specification for the Xoshiro256** random engine."},{"location":"#functions","title":"Functions","text":"Name Description random_device_ctor_token Construct a random device from a token. random_device_ctor Construct a random device. random_device_read Read random data from the random device. random_device_read_s Read random data from the random device in a safe manner. random_device_dtor Free memory used by the random device. random_engine_ctor Construct a random engine using a specific specification. Primarily designed to facilitate the creation of custom random engines. random_engine_next Get the next random number from the random engine. random_engine_dtor Free memory used by the random engine. random_engine_get_spec Get specification of the random engine. random_engine_data Get data of the random engine."},{"location":"#function-details","title":"Function Details","text":""},{"location":"#random_device_ctor_token","title":"random_device_ctor_token","text":"<p>random_device_t *random_device_ctor_token(const char *token)</p> <p>Construct a random device from a token.</p> <code>token</code> A token to construct the random device from. <p>Note</p> <p>Possible tokens on Unix-like systems: <code>/dev/urandom</code> and <code>/dev/random</code>. default is <code>/dev/urandom</code>.</p> <p>Note</p> <p>On Windows, the token is ignored and the default random device is used.</p> Return A pointer to the random device instance."},{"location":"#random_device_ctor","title":"random_device_ctor","text":"<p>random_device_t *random_device_ctor(void)</p> <p>Construct a random device.</p> Return A pointer to the random device instance."},{"location":"#random_device_read","title":"random_device_read","text":"<p>size_t random_device_read(random_device_t *instance, void *buffer, size_t count)</p> <p>Read random data from the random device.</p> <code>instance</code> A pointer to the random device instance. <code>buffer</code> A pointer to the buffer to write the random data to. <code>count</code> The number of bytes to read. Must be less than or equal to the size of the buffer. Return The number of bytes read."},{"location":"#random_device_read_s","title":"random_device_read_s","text":"<p>size_t random_device_read_s(random_device_t *instance, void *buffer, size_t buffer_size, size_t count)</p> <p>Read random data from the random device in a safe manner.</p> <code>instance</code> A pointer to the random device instance. <code>buffer</code> A pointer to the buffer to write the random data to. <code>buffer_size</code> The size of the buffer. <code>count</code> The number of bytes to read. Return The number of bytes read."},{"location":"#random_device_dtor","title":"random_device_dtor","text":"<p>void random_device_dtor(random_device_t *instance)</p> <p>Free memory used by the random device.</p> <p>Note</p> <p>This function should release any resources allocated for the random device.</p> <code>instance</code> A pointer to the random device instance."},{"location":"#random_engine_ctor","title":"random_engine_ctor","text":"<p>random_engine_t * random_engine_ctor(random_engine_spec_t spec, void *data)</p> <p>Construct a random engine using a specific specification. Primarily designed to facilitate the creation of custom random engines.</p> <code>spec</code> A pointer to the random engine specification. <code>data</code> A pointer to the data to be used by the random engine. <p>Warning</p> <p>Spec pointer must point to a static instance.</p> Return A pointer to the random engine instance."},{"location":"#random_engine_next","title":"random_engine_next","text":"<p>uint64_t random_engine_next(random_engine_t *instance)</p> <p>Get the next random number from the random engine.</p> <code>instance</code> A pointer to the random engine instance. Return The next random number in the range [0, UINT64_MAX]."},{"location":"#random_engine_dtor","title":"random_engine_dtor","text":"<p>void random_engine_dtor(random_engine_t *engine)</p> <p>Free memory used by the random engine.</p> <p>Note</p> <p>This function will auto-release data by calling the data destructor function in the random engine specification.</p> <code>engine</code> A pointer to the random engine instance."},{"location":"#random_engine_get_spec","title":"random_engine_get_spec","text":"<p>random_engine_spec_t random_engine_get_spec(random_engine_t *engine)</p> <p>Get specification of the random engine.</p> <p>Note</p> <p>This function is useful when you implement a custom random engine.</p> <code>engine</code> A pointer to the random engine instance. Return A pointer to the random engine specification."},{"location":"#random_engine_data","title":"random_engine_data","text":"<p>void *random_engine_data(random_engine_t *engine)</p> <p>Get data of the random engine.</p> <p>Note</p> <p>This function is useful when you implement a custom random engine.</p> <code>engine</code> A pointer to the random engine instance. Return A pointer to the random engine data."},{"location":"RandomEngineSpec/","title":"RandomEngineSpec","text":"<p>struct RandomEngineSpec</p> <p>Random engine specification structure.</p> <p>Note</p> <p>Defines the behavior and functions used to interact with a custom random engine.</p>"},{"location":"RandomEngineSpec/#variables","title":"Variables","text":"Name Description name The name of the random engine. ctor Constructor function to create an instance of the random engine. next Function to generate the next random number in the engine. dtor Function to release the memory allocated for data by the random engine."},{"location":"RandomEngineSpec/#variable-details","title":"Variable Details","text":""},{"location":"RandomEngineSpec/#name","title":"name","text":"<p>const char *name</p> <p>The name of the random engine.</p>"},{"location":"RandomEngineSpec/#ctor","title":"ctor","text":"<p>random_engine_ctor_fn ctor</p> <p>Constructor function to create an instance of the random engine.</p>"},{"location":"RandomEngineSpec/#next","title":"next","text":"<p>random_engine_next_fn next</p> <p>Function to generate the next random number in the engine.</p>"},{"location":"RandomEngineSpec/#dtor","title":"dtor","text":"<p>random_engine_data_dtor_fn dtor</p> <p>Function to release the memory allocated for data by the random engine.</p>"},{"location":"Xoshiro256ssSpec/","title":"Xoshiro256ssSpec","text":"<p>struct Xoshiro256ssSpec</p> <p>Specification for the Xoshiro256** random engine.</p> <p>Note</p> <p>The first 4 fields is inherited from the RandomEngineSpec structure. So this structure can be cast and used as a RandomEngineSpec.</p>"},{"location":"Xoshiro256ssSpec/#variables","title":"Variables","text":"Name Description name The name of the random engine. ctor Constructor function to create an instance of Xoshiro256ss. next Function to generate the next random number in the engine. dtor Function to release the memory allocated for data by Xoshiro256ss. ctor_full Constructor function with a full 256-bit seed. ctor_seed Constructor function with a single 64-bit seed. ctor_rd Constructor function with a random device."},{"location":"Xoshiro256ssSpec/#variable-details","title":"Variable Details","text":""},{"location":"Xoshiro256ssSpec/#name","title":"name","text":"<p>const char *name</p> <p>The name of the random engine. In this case, <code>Xoshiro256**</code>.</p>"},{"location":"Xoshiro256ssSpec/#ctor","title":"ctor","text":"<p>random_engine_ctor_fn ctor</p> <p>Constructor function to create an instance of Xoshiro256ss. xoshiro256ss_ctor</p>"},{"location":"Xoshiro256ssSpec/#next","title":"next","text":"<p>random_engine_next_fn next</p> <p>Function to generate the next random number in the engine. xoshiro256ss_next</p>"},{"location":"Xoshiro256ssSpec/#dtor","title":"dtor","text":"<p>random_engine_data_dtor_fn dtor</p> <p>Function to release the memory allocated for data by Xoshiro256ss. xoshiro256ss_dtor</p>"},{"location":"Xoshiro256ssSpec/#ctor_full","title":"ctor_full","text":"<p>xoshiro256ss_ctor_full_fn ctor_full</p> <p>Constructor function with a full 256-bit seed. xoshiro256ss_ctor_full</p>"},{"location":"Xoshiro256ssSpec/#ctor_seed","title":"ctor_seed","text":"<p>xoshiro256ss_ctor_seed_fn ctor_seed</p> <p>Constructor function with a single 64-bit seed. xoshiro256ss_ctor_seed</p>"},{"location":"Xoshiro256ssSpec/#ctor_rd","title":"ctor_rd","text":"<p>xoshiro256ss_ctor_rd_fn ctor_rd</p> <p>Constructor function with a random device. xoshiro256ss_ctor_rd</p>"},{"location":"random_device_t/","title":"random_device_t","text":"<p>typedef struct RandomDevice random_device_t</p> <p>Random Device type.</p> <p>Note</p> <p>The internal structure is dependent on the platform. The user should not be concerned with the internal structure of the random device.</p>"},{"location":"random_engine_t/","title":"random_engine_t","text":"<p>typedef struct RandomEngine random_engine_t</p> <p>Random engine type.</p> <p>Note</p> <p>The internal structure of the random engine is hidden from the user. However, the user can access the random engine's specification and data through the <code>random_engine_get_spec</code> and <code>random_engine_data</code> functions.</p>"},{"location":"distributions/","title":"Distribution functions","text":"<p>Distribution functions</p>"},{"location":"distributions/#functions","title":"Functions","text":"Name Description bernoulli_distribution Generate a random boolean value based on the given probability. binomial_distribution Generate a random value from a binomial distribution. discrete_distribution Generate a random index based on a discrete probability distribution. normal_distribution Generate a random value from a normal (Gaussian) distribution. poisson_distribution Generate a random value from a Poisson distribution. uniform_int_distribution Generate a random integer uniformly distributed in the range <code>[min, * max]</code>. uniform_real_distribution Generate a random floating-point number uniformly distributed in the range <code>[min, max)</code>."},{"location":"distributions/#function-details","title":"Function Details","text":""},{"location":"distributions/#bernoulli_distribution","title":"bernoulli_distribution","text":"<p>bool bernoulli_distribution(random_engine_t *engine, double probability)</p> <p>Generate a random boolean value based on the given probability.</p> <code>engine</code> A pointer to the random engine. <code>probability</code> The probability of returning <code>true</code> (between 0.0 and 1.0). Return A random boolean value (<code>true</code> with the specified probability)."},{"location":"distributions/#binomial_distribution","title":"binomial_distribution","text":"<p>uint64_t binomial_distribution(random_engine_t *engine, uint64_t n, double p)</p> <p>Generate a random value from a binomial distribution.</p> <code>engine</code> A pointer to the random engine. <code>n</code> The number of trials (must be &gt;= 0). <code>p</code> The probability of success in a single trial (range: [0.0, 1.0]). Return A random value representing the number of successes in the range [0, n]."},{"location":"distributions/#discrete_distribution","title":"discrete_distribution","text":"<p>size_t discrete_distribution(random_engine_t *engine, const double *weights, size_t size)</p> <p>Generate a random index based on a discrete probability distribution.</p> <code>engine</code> A pointer to the random engine. <code>weights</code> An array of probabilities for each index. <code>size</code> The number of elements in the weights array. Return A random index in the range [0, size-1], sampled according to the given probabilities."},{"location":"distributions/#normal_distribution","title":"normal_distribution","text":"<p>double normal_distribution(random_engine_t *engine, double mu, double sigma)</p> <p>Generate a random value from a normal (Gaussian) distribution.</p> <code>engine</code> A pointer to the random engine. <code>mu</code> The mean of the distribution. <code>sigma</code> The standard deviation of the distribution. Return A random value sampled from the normal distribution, which theoretically ranges from -\u221e to +\u221e."},{"location":"distributions/#poisson_distribution","title":"poisson_distribution","text":"<p>uint64_t poisson_distribution(random_engine_t *engine, double lambda)</p> <p>Generate a random value from a Poisson distribution.</p> <code>engine</code> A pointer to the random engine. <code>lambda</code> The mean of the Poisson distribution (must be &gt; 0). Return A random value representing the number of events in the range [0, \u221e)."},{"location":"distributions/#uniform_int_distribution","title":"uniform_int_distribution","text":"<p>int uniform_int_distribution(random_engine_t *engine, int min, int max)</p> <p>Generate a random integer uniformly distributed in the range <code>[min,  * max]</code>.</p> <code>engine</code> A pointer to the random engine. <code>min</code> The minimum value (inclusive). <code>max</code> The maximum value (inclusive). Return A random integer in the specified range."},{"location":"distributions/#uniform_real_distribution","title":"uniform_real_distribution","text":"<p>double uniform_real_distribution(random_engine_t *engine, double min, double max)</p> <p>Generate a random floating-point number uniformly distributed in the range <code>[min, max)</code>.</p> <code>engine</code> A pointer to the random engine. <code>min</code> The minimum value (inclusive). <code>max</code> The maximum value (exclusive). Return A random floating-point number in the specified range."},{"location":"xoshiro256ss/","title":"Xoshiro256**","text":"<p>Xoshiro256** random number generator</p>"},{"location":"xoshiro256ss/#functions","title":"Functions","text":"Name Description xoshiro256ss_ctor Construct a new xoshiro256** random number generator with a random seed generated from the default random device. xoshiro256ss_ctor_full Construct a new xoshiro256** random number generator with a full 256-bit seed. xoshiro256ss_ctor_rd Construct a new xoshiro256** random number generator with a random seed generated from the given random device. xoshiro256ss_ctor_seed Construct a new xoshiro256** random number generator with a 64-bit seed. xoshiro256ss_dtor Release the resources used by the xoshiro256** random number generator. xoshiro256ss_next Generate the next random number from the xoshiro256** random number generator."},{"location":"xoshiro256ss/#function-details","title":"Function Details","text":""},{"location":"xoshiro256ss/#xoshiro256ss_ctor","title":"xoshiro256ss_ctor","text":"<p>random_engine_t *xoshiro256ss_ctor(void)</p> <p>Construct a new xoshiro256** random number generator with a random seed generated from the default random device.</p> Return random_engine_t* The constructed random number generator."},{"location":"xoshiro256ss/#xoshiro256ss_ctor_full","title":"xoshiro256ss_ctor_full","text":"<p>random_engine_t *xoshiro256ss_ctor_full(const uint64_t seed[4])</p> <p>Construct a new xoshiro256** random number generator with a full 256-bit seed.</p> <code>seed</code> The 256-bit seed. Return random_engine_t* The constructed random number generator."},{"location":"xoshiro256ss/#xoshiro256ss_ctor_rd","title":"xoshiro256ss_ctor_rd","text":"<p>random_engine_t *xoshiro256ss_ctor_rd(random_device_t *rd)</p> <p>Construct a new xoshiro256** random number generator with a random seed generated from the given random device.</p> <code>rd</code> The random device. Return random_engine_t* The constructed random number generator."},{"location":"xoshiro256ss/#xoshiro256ss_ctor_seed","title":"xoshiro256ss_ctor_seed","text":"<p>random_engine_t *xoshiro256ss_ctor_seed(const uint64_t seed)</p> <p>Construct a new xoshiro256** random number generator with a 64-bit seed.</p> <p>Note</p> <p>The seed is expanded to a full 256-bit seed using the splitmix64 algorithm.</p> <code>seed</code> The 64-bit seed. Return random_engine_t* The constructed random number generator."},{"location":"xoshiro256ss/#xoshiro256ss_dtor","title":"xoshiro256ss_dtor","text":"<p>void xoshiro256ss_dtor(random_engine_t *engine)</p> <p>Release the resources used by the xoshiro256** random number generator.</p> <code>engine</code> The random number generator."},{"location":"xoshiro256ss/#xoshiro256ss_next","title":"xoshiro256ss_next","text":"<p>uint64_t xoshiro256ss_next(random_engine_t *engine)</p> <p>Generate the next random number from the xoshiro256** random number generator.</p> <code>engine</code> The random number generator. Return uint64_t The next random number."}]}