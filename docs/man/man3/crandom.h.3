.TH "src/crandom.h" 3 "Version 1.0.0" "CRandom" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/crandom.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdio\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <stddef\&.h>\fP
.br
\fR#include <stdint\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBRandomEngineSpec\fP"
.br
.RI "Random engine specification structure\&. Defines the behavior and functions used to interact with a custom random engine\&. "
.ti -1c
.RI "struct \fBXoshiro256ssSpec\fP"
.br
.RI "Specification for the Xoshiro256** random engine\&. The first 4 fields is inherited from the \fBRandomEngineSpec\fP structure\&. So this structure can be cast and used as a \fBRandomEngineSpec\fP\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBH_RANDOM_INCLUDED\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct RandomDevice \fBrandom_device_t\fP"
.br
.RI "Random Device type\&. The internal structure is dependent on the platform\&. The user should not be concerned with the internal structure of the random device\&. "
.ti -1c
.RI "typedef struct RandomEngine \fBrandom_engine_t\fP"
.br
.RI "Random engine type\&. The internal structure of the random engine is hidden from the user\&. However, the user can access the random engine's specification and data through the \fRrandom_engine_get_spec\fP and \fRrandom_engine_data\fP functions\&. "
.ti -1c
.RI "typedef \fBrandom_engine_t\fP *(* \fBrandom_engine_ctor_fn\fP) (void)"
.br
.RI "Construct a random engine\&. "
.ti -1c
.RI "typedef uint64_t(* \fBrandom_engine_next_fn\fP) (\fBrandom_engine_t\fP *instance)"
.br
.RI "Function type to get the next random number from the random engine\&. "
.ti -1c
.RI "typedef void(* \fBrandom_engine_data_dtor_fn\fP) (\fBrandom_engine_t\fP *instance)"
.br
.RI "Function Type to release the memory allocated for data by the random engine, but NOT the random engine itself\&. "
.ti -1c
.RI "typedef struct \fBRandomEngineSpec\fP \fBrandom_engine_spec_t\fP"
.br
.ti -1c
.RI "typedef struct \fBXoshiro256ssSpec\fP \fBxoshiro256ss_spec_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBrandom_device_t\fP * \fBrandom_device_ctor_token\fP (const char *token)"
.br
.RI "Construct a random device from a token\&. "
.ti -1c
.RI "\fBrandom_device_t\fP * \fBrandom_device_ctor\fP (void)"
.br
.RI "Construct a random device\&. "
.ti -1c
.RI "size_t \fBrandom_device_read\fP (\fBrandom_device_t\fP *instance, void *buffer, size_t count)"
.br
.RI "Read random data from the random device\&. "
.ti -1c
.RI "size_t \fBrandom_device_read_s\fP (\fBrandom_device_t\fP *instance, void *buffer, size_t buffer_size, size_t count)"
.br
.RI "Read random data from the random device in a safe manner\&. "
.ti -1c
.RI "void \fBrandom_device_dtor\fP (\fBrandom_device_t\fP *instance)"
.br
.RI "Free memory used by the random device\&. This function should release any resources allocated for the random device\&. "
.ti -1c
.RI "uint64_t \fBrandom_engine_next\fP (\fBrandom_engine_t\fP *instance)"
.br
.RI "Get the next random number from the random engine\&. "
.ti -1c
.RI "\fBrandom_engine_t\fP * \fBrandom_engine_ctor\fP (const \fBrandom_engine_spec_t\fP *spec, void *data)"
.br
.RI "Construct a random engine using a specific specification\&. Primarily designed to facilitate the creation of custom random engines\&. "
.ti -1c
.RI "void \fBrandom_engine_dtor\fP (\fBrandom_engine_t\fP *engine)"
.br
.RI "Free memory used by the random engine\&. This function will auto-release data by calling the data destructor function in the random engine specification\&. "
.ti -1c
.RI "const \fBrandom_engine_spec_t\fP * \fBrandom_engine_get_spec\fP (\fBrandom_engine_t\fP *engine)"
.br
.RI "Get specification of the random engine\&. This function is useful when you implement a custom random engine\&. "
.ti -1c
.RI "void * \fBrandom_engine_data\fP (\fBrandom_engine_t\fP *engine)"
.br
.RI "Get data of the random engine\&. This function is useful when you implement a custom random engine\&. "
.ti -1c
.RI "int \fBuniform_int_distribution\fP (\fBrandom_engine_t\fP *engine, int min, int max)"
.br
.RI "Generate a random integer uniformly distributed in the range [min, max]\&. "
.ti -1c
.RI "double \fBuniform_real_distribution\fP (\fBrandom_engine_t\fP *engine, double min, double max)"
.br
.RI "Generate a random floating-point number uniformly distributed in the range [min, max)\&. "
.ti -1c
.RI "bool \fBbernoulli_distribution\fP (\fBrandom_engine_t\fP *engine, double probability)"
.br
.RI "Generate a random boolean value based on the given probability\&. "
.ti -1c
.RI "uint64_t \fBbinomial_distribution\fP (\fBrandom_engine_t\fP *engine, uint64_t n, double p)"
.br
.RI "Generate a random value from a binomial distribution\&. "
.ti -1c
.RI "uint64_t \fBpoisson_distribution\fP (\fBrandom_engine_t\fP *engine, double lambda)"
.br
.RI "Generate a random value from a Poisson distribution\&. "
.ti -1c
.RI "double \fBnormal_distribution\fP (\fBrandom_engine_t\fP *engine, double mu, double sigma)"
.br
.RI "Generate a random value from a normal (Gaussian) distribution\&. "
.ti -1c
.RI "size_t \fBdiscrete_distribution\fP (\fBrandom_engine_t\fP *engine, const double *weights, size_t size)"
.br
.RI "Generate a random index based on a discrete probability distribution\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBrandom_engine_spec_t\fP \fBRandomDeviceEngine\fP"
.br
.RI "Specification for the random device engine\&. "
.ti -1c
.RI "const \fBxoshiro256ss_spec_t\fP \fBXoshiro256ssEngine\fP"
.br
.RI "The specification for the Xoshiro256** random engine\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define H_RANDOM_INCLUDED"

.SH "Typedef Documentation"
.PP 
.SS "typedef struct RandomDevice \fBrandom_device_t\fP"

.PP
Random Device type\&. The internal structure is dependent on the platform\&. The user should not be concerned with the internal structure of the random device\&. 
.SS "typedef \fBrandom_engine_t\fP *(* random_engine_ctor_fn) (void)"

.PP
Construct a random engine\&. 
.PP
\fBReturns\fP
.RS 4
A pointer to the random engine instance\&. 
.RE
.PP

.SS "typedef void(* random_engine_data_dtor_fn) (\fBrandom_engine_t\fP *instance)"

.PP
Function Type to release the memory allocated for data by the random engine, but NOT the random engine itself\&. 
.PP
\fBParameters\fP
.RS 4
\fIinstance\fP A pointer to the random engine instance\&. 
.RE
.PP

.SS "typedef uint64_t(* random_engine_next_fn) (\fBrandom_engine_t\fP *instance)"

.PP
Function type to get the next random number from the random engine\&. 
.PP
\fBParameters\fP
.RS 4
\fIinstance\fP A pointer to the random engine instance\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The next random number in the range [0, UINT64_MAX]\&. 
.RE
.PP

.SS "typedef struct \fBRandomEngineSpec\fP \fBrandom_engine_spec_t\fP"

.SS "typedef struct RandomEngine \fBrandom_engine_t\fP"

.PP
Random engine type\&. The internal structure of the random engine is hidden from the user\&. However, the user can access the random engine's specification and data through the \fRrandom_engine_get_spec\fP and \fRrandom_engine_data\fP functions\&. 
.SS "typedef struct \fBXoshiro256ssSpec\fP \fBxoshiro256ss_spec_t\fP"

.SH "Function Documentation"
.PP 
.SS "bool bernoulli_distribution (\fBrandom_engine_t\fP * engine, double probability)"

.PP
Generate a random boolean value based on the given probability\&. 
.PP
\fBParameters\fP
.RS 4
\fIengine\fP A pointer to the random engine\&. 
.br
\fIprobability\fP The probability of returning \fRtrue\fP (between 0\&.0 and 1\&.0)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A random boolean value (\fRtrue\fP with the specified probability)\&. 
.RE
.PP

.SS "uint64_t binomial_distribution (\fBrandom_engine_t\fP * engine, uint64_t n, double p)"

.PP
Generate a random value from a binomial distribution\&. 
.PP
\fBParameters\fP
.RS 4
\fIengine\fP A pointer to the random engine\&. 
.br
\fIn\fP The number of trials (must be >= 0)\&. 
.br
\fIp\fP The probability of success in a single trial (range: [0\&.0, 1\&.0])\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A random value representing the number of successes in the range [0, n]\&. 
.RE
.PP

.SS "size_t discrete_distribution (\fBrandom_engine_t\fP * engine, const double * weights, size_t size)"

.PP
Generate a random index based on a discrete probability distribution\&. 
.PP
\fBParameters\fP
.RS 4
\fIengine\fP A pointer to the random engine\&. 
.br
\fIweights\fP An array of probabilities for each index\&. 
.br
\fIsize\fP The number of elements in the weights array\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A random index in the range [0, size-1], sampled according to the given probabilities\&. 
.RE
.PP

.SS "double normal_distribution (\fBrandom_engine_t\fP * engine, double mu, double sigma)"

.PP
Generate a random value from a normal (Gaussian) distribution\&. 
.PP
\fBParameters\fP
.RS 4
\fIengine\fP A pointer to the random engine\&. 
.br
\fImu\fP The mean of the distribution\&. 
.br
\fIsigma\fP The standard deviation of the distribution\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A random value sampled from the normal distribution, which theoretically ranges from -∞ to +∞\&. 
.RE
.PP

.SS "uint64_t poisson_distribution (\fBrandom_engine_t\fP * engine, double lambda)"

.PP
Generate a random value from a Poisson distribution\&. 
.PP
\fBParameters\fP
.RS 4
\fIengine\fP A pointer to the random engine\&. 
.br
\fIlambda\fP The mean of the Poisson distribution (must be > 0)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A random value representing the number of events in the range [0, ∞)\&. 
.RE
.PP

.SS "\fBrandom_device_t\fP * random_device_ctor (void )"

.PP
Construct a random device\&. 
.PP
\fBReturns\fP
.RS 4
A pointer to the random device instance\&. 
.RE
.PP

.SS "\fBrandom_device_t\fP * random_device_ctor_token (const char * token)"

.PP
Construct a random device from a token\&. 
.PP
\fBParameters\fP
.RS 4
\fItoken\fP A token to construct the random device from\&. Possible tokens are:
.IP "\(bu" 2
'/dev/urandom' - Use /dev/urandom as the random device\&.
.IP "\(bu" 2
'/dev/random' - Use /dev/random as the random device\&. Note that on Windows, the token is ignored and the default random device is used\&. 
.PP
.RE
.PP
\fBReturns\fP
.RS 4
A pointer to the random device instance\&. 
.RE
.PP

.SS "void random_device_dtor (\fBrandom_device_t\fP * instance)"

.PP
Free memory used by the random device\&. This function should release any resources allocated for the random device\&. 
.PP
\fBParameters\fP
.RS 4
\fIinstance\fP A pointer to the random device instance\&. 
.RE
.PP

.SS "size_t random_device_read (\fBrandom_device_t\fP * instance, void * buffer, size_t count)"

.PP
Read random data from the random device\&. 
.PP
\fBParameters\fP
.RS 4
\fIinstance\fP A pointer to the random device instance\&. 
.br
\fIbuffer\fP A pointer to the buffer to write the random data to\&. 
.br
\fIcount\fP The number of bytes to read\&. Must be less than or equal to the size of the buffer\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The number of bytes read\&. 
.RE
.PP

.SS "size_t random_device_read_s (\fBrandom_device_t\fP * instance, void * buffer, size_t buffer_size, size_t count)"

.PP
Read random data from the random device in a safe manner\&. 
.PP
\fBParameters\fP
.RS 4
\fIinstance\fP A pointer to the random device instance\&. 
.br
\fIbuffer\fP A pointer to the buffer to write the random data to\&. 
.br
\fIbuffer_size\fP The size of the buffer\&. 
.br
\fIcount\fP The number of bytes to read\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The number of bytes read\&. 
.RE
.PP

.SS "\fBrandom_engine_t\fP * random_engine_ctor (const \fBrandom_engine_spec_t\fP * spec, void * data)"

.PP
Construct a random engine using a specific specification\&. Primarily designed to facilitate the creation of custom random engines\&. 
.PP
\fBParameters\fP
.RS 4
\fIspec\fP A pointer to the random engine specification\&. Must point to a static instance of a random engine specification\&. 
.br
\fIdata\fP A pointer to the data to be used by the random engine\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A pointer to the random engine instance\&. 
.RE
.PP

.SS "void * random_engine_data (\fBrandom_engine_t\fP * engine)"

.PP
Get data of the random engine\&. This function is useful when you implement a custom random engine\&. 
.PP
\fBParameters\fP
.RS 4
\fIengine\fP A pointer to the random engine instance\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A pointer to the random engine data\&. 
.RE
.PP

.SS "void random_engine_dtor (\fBrandom_engine_t\fP * engine)"

.PP
Free memory used by the random engine\&. This function will auto-release data by calling the data destructor function in the random engine specification\&. 
.PP
\fBParameters\fP
.RS 4
\fIengine\fP A pointer to the random engine instance\&. 
.RE
.PP

.SS "const \fBrandom_engine_spec_t\fP * random_engine_get_spec (\fBrandom_engine_t\fP * engine)"

.PP
Get specification of the random engine\&. This function is useful when you implement a custom random engine\&. 
.PP
\fBParameters\fP
.RS 4
\fIengine\fP A pointer to the random engine instance\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A pointer to the random engine specification\&. 
.RE
.PP

.SS "uint64_t random_engine_next (\fBrandom_engine_t\fP * instance)"

.PP
Get the next random number from the random engine\&. 
.PP
\fBParameters\fP
.RS 4
\fIinstance\fP A pointer to the random engine instance\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The next random number in the range [0, UINT64_MAX]\&. 
.RE
.PP

.SS "int uniform_int_distribution (\fBrandom_engine_t\fP * engine, int min, int max)"

.PP
Generate a random integer uniformly distributed in the range [min, max]\&. 
.PP
\fBParameters\fP
.RS 4
\fIengine\fP A pointer to the random engine\&. 
.br
\fImin\fP The minimum value (inclusive)\&. 
.br
\fImax\fP The maximum value (inclusive)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A random integer in the specified range\&. 
.RE
.PP

.SS "double uniform_real_distribution (\fBrandom_engine_t\fP * engine, double min, double max)"

.PP
Generate a random floating-point number uniformly distributed in the range [min, max)\&. 
.PP
\fBParameters\fP
.RS 4
\fIengine\fP A pointer to the random engine\&. 
.br
\fImin\fP The minimum value (inclusive)\&. 
.br
\fImax\fP The maximum value (exclusive)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A random floating-point number in the specified range\&. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "const \fBrandom_engine_spec_t\fP RandomDeviceEngine\fR [extern]\fP"

.PP
Specification for the random device engine\&. 
.SS "const \fBxoshiro256ss_spec_t\fP Xoshiro256ssEngine\fR [extern]\fP"

.PP
The specification for the Xoshiro256** random engine\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for CRandom from the source code\&.
