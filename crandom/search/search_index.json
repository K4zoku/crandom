{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CRandom","text":"<p>A random number generation implementation in C similar to the one found in standard C++</p>"},{"location":"#types","title":"Types","text":"Name Description random_device_t Random Device type. *    The internal structure is dependent on the platform. The user should not *    be concerned with the internal structure of the random device. random_engine_t Random engine type. *    The internal structure of the random engine is hidden from the user. *    However, the user can access the random engine's specification and data *    through the <code>random_engine_get_spec</code> and <code>random_engine_data</code> functions. RandomEngineSpec Function Type to release the memory allocated for data by the random * engine, but NOT the random engine itself.Random engine specification structure. *    Defines the behavior and functions used to interact with a custom random * engine. Xoshiro256ssSpec Specification for the Xoshiro256** random engine. *    The first 4 fields is inherited from the RandomEngineSpec structure. *    So this structure can be cast and used as a RandomEngineSpec. * @see RandomEngineSpec xoshiro256ss_spec_t Construct a random engine with 256 bits of seed data.Construct a random engine with a single 64-bit seed. *    The seed will be duplicated to fill the 256 bits of seed data.Construct a random engine with a random device."},{"location":"#variables","title":"Variables","text":"Name Description RandomDeviceEngine Specification for the random device engine. Xoshiro256ssEngine The specification for the Xoshiro256** random engine."},{"location":"#functions","title":"Functions","text":"Name Description random_device_ctor_token Construct a random device from a token. random_device_ctor Construct a random device. random_device_read Read random data from the random device. random_device_read_s Read random data from the random device in a safe manner. random_device_dtor Free memory used by the random device. *    This function should release any resources allocated for the random * device. random_engine_next Construct a random engine. * @return A pointer to the random engine instance. Function type to get the next random number from the random engine.Get the next random number from the random engine. random_engine_ctor Construct a random engine using a specific specification. *   Primarily designed to facilitate the creation of custom random engines. random_engine_dtor Free memory used by the random engine. *   This function will auto-release data by calling the data destructor *   function in the random engine specification. random_engine_get_spec Get specification of the random engine. *    This function is useful when you implement a custom random engine. random_engine_data Get data of the random engine. *    This function is useful when you implement a custom random engine. uniform_int_distribution Generate a random integer uniformly distributed in the range [min, * max]. uniform_real_distribution Generate a random floating-point number uniformly distributed in the * range [min, max). bernoulli_distribution Generate a random boolean value based on the given probability. binomial_distribution Generate a random value from a binomial distribution. poisson_distribution Generate a random value from a Poisson distribution. normal_distribution Generate a random value from a normal (Gaussian) distribution. discrete_distribution Generate a random index based on a discrete probability distribution."},{"location":"#variable-details","title":"Variable Details","text":""},{"location":"#randomdeviceengine","title":"RandomDeviceEngine","text":"<p>extern const random_engine_spec_t RandomDeviceEngine</p> <p>Specification for the random device engine.</p>"},{"location":"#xoshiro256ssengine","title":"Xoshiro256ssEngine","text":"<p>extern const xoshiro256ss_spec_t Xoshiro256ssEngine</p> <p>The specification for the Xoshiro256** random engine.</p>"},{"location":"#function-details","title":"Function Details","text":""},{"location":"#random_device_ctor_token","title":"random_device_ctor_token","text":"<p>random_device_t *random_device_ctor_token(const char *token)</p> <p>Construct a random device from a token.</p> <code>token</code> A token to construct the random device from. Possible tokens are: - \"/dev/urandom\" - Use /dev/urandom as the random device. - \"/dev/random\" - Use /dev/random as the random device. Note that on Windows, the token is ignored and the default random device is used. Return A pointer to the random device instance."},{"location":"#random_device_ctor","title":"random_device_ctor","text":"<p>random_device_t *random_device_ctor(void)</p> <p>Construct a random device.</p> Return A pointer to the random device instance."},{"location":"#random_device_read","title":"random_device_read","text":"<p>size_t random_device_read(random_device_t *instance, void *buffer, size_t count)</p> <p>Read random data from the random device.</p> <code>instance</code> A pointer to the random device instance. <code>buffer</code> A pointer to the buffer to write the random data to. <code>count</code> The number of bytes to read. Must be less than or equal to the size of the buffer. Return The number of bytes read."},{"location":"#random_device_read_s","title":"random_device_read_s","text":"<p>size_t random_device_read_s(random_device_t *instance, void *buffer, size_t buffer_size, size_t count)</p> <p>Read random data from the random device in a safe manner.</p> <code>instance</code> A pointer to the random device instance. <code>buffer</code> A pointer to the buffer to write the random data to. <code>buffer_size</code> The size of the buffer. <code>count</code> The number of bytes to read. Return The number of bytes read."},{"location":"#random_device_dtor","title":"random_device_dtor","text":"<p>void random_device_dtor(random_device_t *instance)</p> <p>Free memory used by the random device.  *    This function should release any resources allocated for the random  * device.</p> <code>instance</code> A pointer to the random device instance."},{"location":"#random_engine_next","title":"random_engine_next","text":"<p>uint64_t random_engine_next(random_engine_t *instance)</p> <p>Construct a random engine.  * @return A pointer to the random engine instance.</p> <p>Function type to get the next random number from the random engine.</p> <code>instance</code> A pointer to the random engine instance. Return <p>The next random number in the range [0, UINT64_MAX].</p> <p>Get the next random number from the random engine.</p> <code>instance</code> A pointer to the random engine instance. Return The next random number in the range [0, UINT64_MAX]."},{"location":"#random_engine_ctor","title":"random_engine_ctor","text":"<p>random_engine_t *random_engine_ctor(const random_engine_spec_t *spec, void *data)</p> <p>Construct a random engine using a specific specification.  *   Primarily designed to facilitate the creation of custom random engines.</p> <code>spec</code> A pointer to the random engine specification.   Must point to a static instance of a random engine specification. <code>data</code> A pointer to the data to be used by the random engine. Return A pointer to the random engine instance."},{"location":"#random_engine_dtor","title":"random_engine_dtor","text":"<p>void random_engine_dtor(random_engine_t *engine)</p> <p>Free memory used by the random engine.  *   This function will auto-release data by calling the data destructor  *   function in the random engine specification.</p> <code>engine</code> A pointer to the random engine instance."},{"location":"#random_engine_get_spec","title":"random_engine_get_spec","text":"<p>const random_engine_spec_t *random_engine_get_spec(random_engine_t *engine)</p> <p>Get specification of the random engine.  *    This function is useful when you implement a custom random engine.</p> <code>engine</code> A pointer to the random engine instance. Return A pointer to the random engine specification."},{"location":"#random_engine_data","title":"random_engine_data","text":"<p>void *random_engine_data(random_engine_t *engine)</p> <p>Get data of the random engine.  *    This function is useful when you implement a custom random engine.</p> <code>engine</code> A pointer to the random engine instance. Return A pointer to the random engine data."},{"location":"#uniform_int_distribution","title":"uniform_int_distribution","text":"<p>int uniform_int_distribution(random_engine_t *engine, int min, int max)</p> <p>Generate a random integer uniformly distributed in the range [min,  * max].</p> <code>engine</code> A pointer to the random engine. <code>min</code> The minimum value (inclusive). <code>max</code> The maximum value (inclusive). Return A random integer in the specified range."},{"location":"#uniform_real_distribution","title":"uniform_real_distribution","text":"<p>double uniform_real_distribution(random_engine_t *engine, double min, double max)</p> <p>Generate a random floating-point number uniformly distributed in the  * range [min, max).</p> <code>engine</code> A pointer to the random engine. <code>min</code> The minimum value (inclusive). <code>max</code> The maximum value (exclusive). Return A random floating-point number in the specified range."},{"location":"#bernoulli_distribution","title":"bernoulli_distribution","text":"<p>bool bernoulli_distribution(random_engine_t *engine, double probability)</p> <p>Generate a random boolean value based on the given probability.</p> <code>engine</code> A pointer to the random engine. <code>probability</code> The probability of returning <code>true</code> (between 0.0 and 1.0). Return A random boolean value (<code>true</code> with the specified probability)."},{"location":"#binomial_distribution","title":"binomial_distribution","text":"<p>uint64_t binomial_distribution(random_engine_t *engine, uint64_t n, double p)</p> <p>Generate a random value from a binomial distribution.</p> <code>engine</code> A pointer to the random engine. <code>n</code> The number of trials (must be &gt;= 0). <code>p</code> The probability of success in a single trial (range: [0.0, 1.0]). Return A random value representing the number of successes in the range [0, n]."},{"location":"#poisson_distribution","title":"poisson_distribution","text":"<p>uint64_t poisson_distribution(random_engine_t *engine, double lambda)</p> <p>Generate a random value from a Poisson distribution.</p> <code>engine</code> A pointer to the random engine. <code>lambda</code> The mean of the Poisson distribution (must be &gt; 0). Return A random value representing the number of events in the range [0, \u221e)."},{"location":"#normal_distribution","title":"normal_distribution","text":"<p>double normal_distribution(random_engine_t *engine, double mu, double sigma)</p> <p>Generate a random value from a normal (Gaussian) distribution.</p> <code>engine</code> A pointer to the random engine. <code>mu</code> The mean of the distribution. <code>sigma</code> The standard deviation of the distribution. Return A random value sampled from the normal distribution, which theoretically ranges from -\u221e to +\u221e."},{"location":"#discrete_distribution","title":"discrete_distribution","text":"<p>size_t discrete_distribution(random_engine_t *engine, const double *weights, size_t size)</p> <p>Generate a random index based on a discrete probability distribution.</p> <code>engine</code> A pointer to the random engine. <code>weights</code> An array of probabilities for each index. <code>size</code> The number of elements in the weights array. Return A random index in the range [0, size-1], sampled according to the given probabilities."},{"location":"RandomEngineSpec/","title":"RandomEngineSpec","text":"<p>struct RandomEngineSpec</p> <p>Function Type to release the memory allocated for data by the random  * engine, but NOT the random engine itself.</p> <code>instance</code> <p>A pointer to the random engine instance.</p> <p>Random engine specification structure.  *    Defines the behavior and functions used to interact with a custom random  * engine.</p>"},{"location":"RandomEngineSpec/#variables","title":"Variables","text":"Name Description name The name of the random engine. ctor Constructor function to create an instance of the random engine. next Function to generate the next random number in the engine. dtor Function to release the memory allocated for data by the random * engine."},{"location":"RandomEngineSpec/#variable-details","title":"Variable Details","text":""},{"location":"RandomEngineSpec/#name","title":"name","text":"<p>const char *name</p> <p>The name of the random engine.</p>"},{"location":"RandomEngineSpec/#ctor","title":"ctor","text":"<p>random_engine_ctor_fn ctor</p> <p>Constructor function to create an instance of the random engine.</p>"},{"location":"RandomEngineSpec/#next","title":"next","text":"<p>random_engine_next_fn next</p> <p>Function to generate the next random number in the engine.</p>"},{"location":"RandomEngineSpec/#dtor","title":"dtor","text":"<p>random_engine_data_dtor_fn dtor</p> <p>Function to release the memory allocated for data by the random    * engine.</p>"},{"location":"Xoshiro256ssSpec/","title":"Xoshiro256ssSpec","text":"<p>struct Xoshiro256ssSpec</p> <p>Specification for the Xoshiro256** random engine.  *    The first 4 fields is inherited from the RandomEngineSpec structure.  *    So this structure can be cast and used as a RandomEngineSpec.  * @see RandomEngineSpec</p>"},{"location":"random_device_t/","title":"random_device_t","text":"<p>typedef struct RandomDevice random_device_t</p> <p>Random Device type.  *    The internal structure is dependent on the platform. The user should not  *    be concerned with the internal structure of the random device.</p>"},{"location":"random_engine_t/","title":"random_engine_t","text":"<p>typedef struct RandomEngine random_engine_t</p> <p>Random engine type.  *    The internal structure of the random engine is hidden from the user.  *    However, the user can access the random engine's specification and data  *    through the <code>random_engine_get_spec</code> and <code>random_engine_data</code> functions.</p>"},{"location":"xoshiro256ss_spec_t/","title":"xoshiro256ss_spec_t","text":"<p>typedef struct Xoshiro256ssSpec xoshiro256ss_spec_t</p> <p>Construct a random engine with 256 bits of seed data.</p> <code>seed</code> The seed to initialize the random engine with. Return <p>A pointer to the random engine instance.</p> <p>Construct a random engine with a single 64-bit seed.    *    The seed will be duplicated to fill the 256 bits of seed data.</p> <code>seed</code> The seed to initialize the random engine with. Return <p>A pointer to the random engine instance.</p> <p>Construct a random engine with a random device.</p> <code>rd</code> A pointer to the random device instance. Return A pointer to the random engine instance."}]}